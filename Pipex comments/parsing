/*Le programme suivant crée un tube puis se dédouble (fork(2)) pour créer un processus fils. 
Le processus fils hérite d'un ensemble dupliqué de descripteurs de fichier qui font référence au même tube. 
Après le fork(2), chaque processus ferme les descripteurs dont il n'a pas besoin pour le tube (voir pipe(7)). 
Le père écrit alors la chaîne contenue dans l'argument de la ligne de commande du programme et le fils lit cette chaîne, 
un octet à la fois, qu'il affiche sur sa sortie standard.
*/
/* Creer une fonction 
*/

/* Pour être certain de qui va écrire et qui va lire dans le pipe, il faut que les processus ferment les extrémités qu'ils n'utilisent pas. 
De cette façon le processus père peut être certain que s'il écrit dans le pipe ("fd[1]"), le fils va reçevoir l'information en lecture ("fd[0]").
*/

/*
fork() divisera notre processus en deux sous-processus : il renvoie 0 pour 
le processus enfant, un nombre différent de zéro pour le processus parent 
ou un -1 en cas d'erreur. Aussi: fork() divise le processus en deux processus
parallèles et simultanés, qui se produisent en même temps.
Le programme suivant crée un tube puis se dédouble pour créer un processus 
fils. 
Le processus fils hérite d'un ensemble dupliqué de descripteurs de fichier 
qui font référence au même tube. Après le fork(2), chaque processus ferme 
les descripteurs dont il n'a pas besoin pour le tube.
Le père écrit alors la chaîne contenue dans l'argument de la ligne 
de commande du programme et le fils lit cette chaîne, 
un octet à la fois, qu'il affiche sur sa sortie standard.
*/

// parsing (somewhere in your code)
/*
char *PATH_from_envp;
char **mypaths;
char **mycmdargs;
// recuperer the line PATH from envp
PATH_from_envp = ft_substr(envp ....);
mypaths = ft_split(PATH_from_envp, ":"); // see section 4 for a
                                            small note[0]
mycmdargs = ft_split(ag[2], " ");
// in your child or parent process
int  i;
char *cmd;
i = -1;
while (mypaths[++i])
{
    cmd = ft_join(mypaths[i], ag[2]); // protect your ft_join
    execve(cmd, mycmdargs, envp); // if execve succeeds, it exits
    // perror("Error"); <- add perror to debug
    free(cmd) // if execve fails, we free and we try a new path
}
return (EXIT_FAILURE);*/
/*Fonction excuve*/
/*
void	execute(char *argv, char **envp)
{
	char	**cmd;
	int		i;
	char	*path;

	i = -1;
	cmd = ft_split(argv, ' ');
	path = find_path(cmd[0], envp);
	if (!path)	
	{
		while (cmd[++i])
			free(cmd[i]);
		free(cmd);
		error();
	}
	if (execve(path, cmd, envp) == -1)
		error();
}*/
/* int execve(const char *fichier, char *const argv[], char *envp[]); 
execute le fichier argv est un tableau de chaînes d'arguments passées 
au nouveau programme. envp est un tableau de chaînes, 
ayant par convention la forme clé=valeur, qui sont passées au nouveau 
programme comme environnement.
*/
/*
# parent_process(f2, cmd2);
int status;
waitpid(-1, &status, 0);
dup2(f2, ...); // f2 is the stdout
dup2(end[0], ...); // end[0] is the stdin
close(end[1])
close(f2);
// execve function for each possible path (see below)
//exit(EXIT_FAILURE);
*/

/*
# child_process(f1, cmd1);
// add protection if dup2() < 0
// dup2 close stdin, f1 becomes the new stdin
dup2(f1, STDIN_FILENO); // we want f1 to be execve() input
dup2(end[1], STDOUT_FILENO); // we want end[1] to be execve() stdout
close(end[0]) # --> always close the end of the pipe you don't use,
                    as long as the pipe is open, the other end will 
                    be waiting for some kind of input and will not
                    be able to finish its process
close(f1)
// execve function for each possible path (see below)
exit(EXIT_FAILURE);
*/


/* La fonction main doit executer le filein(fils) et fileout(pere) ou afficher une erreur 
si il y a une erreur */
/*
int	main(int argc, char **argv)
{
	int		fd[2]; // tableau de pipe (tube) communication
	int		pid; //fork() --> Creation du fils et du pere
	char	**buf; // Creation du fils
	
	if (argc == 5)
	{
		if (pipe(fd) == -1) // creation du pipe
		{
			perror("pipe failed");
			exit(EXIT_FAILURE);
		}
		pid = fork(); // creation du fork
		if (pid == -1)
		{
			perror("fork failed");
			exit(EXIT_FAILURE);
		}
		if (pid == 0) // Le fils (pid = 0) lit dans le tube(pipe)  if fork() returns 0, we are in the child process
		{
			close(fd[1]);  // Ferme l'extrémité d'écriture inutilisée (ecriture)
			file_in_child(argv, buf, fd);
			exit(EXIT_SUCCESS);
		}
		else // le parent (pid = autre aue 0)
			// Le père écrit argv[1] dans le tube 
			close(fd[0]);       // Ferme l'extrémité de lecture inutilisée (lecture) 
			write(fd[1], argv[1], strlen(argv[1]));
			close(fd[1]);       // fermeture du pipe 
			wait(NULL);             // Attente du fils 
			exit(EXIT_SUCCESS);
		
	}
	else
}
/* PIPE = Un "pipe" ou "tuyau" permet de passer le résultat d'une commande shell à une autre commande shell.
exemple : ls | grep Make --> execute la commande ls puis execute la 2eme a partir de la 1ere
*/



/*
if (pid == 0) // Le fils lit dans le tube(pipe) 
		{
			close(fd[1]);  // Ferme l'extrémité d'écriture inutilisée
        	while (read(fd[0], &buf, 1) > 0)
				write(STDOUT_FILENO, &buf, 1);
			write(STDOUT_FILENO, "\n", 1);
			close(fd[0]);
		_	exit(EXIT_SUCCESS);
		}
	}
*/